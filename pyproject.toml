[tool.poetry]
name = "SiD2ReGenerator"
version = "0.1.1"
description = "The SiD2ReGenerator Python project"
license = "BSD-3-Clause"
authors = ["B. Stratmann <benedikt.stratmann@iosb.fraunhofer.de>"]
maintainers = ["B. Stratmann <benedikt.stratmann@iosb.fraunhofer.de>"]
readme = "README.md"
# The project homepage, e.g. Gitlab pages
# homepage = ""
repository = "https://github.com/FraunhoferIOSB/SiD2Re"
# The project documentation, e.g. Gitlab pages
# documentation = ""
keywords = ["tool", "ml"]
classifiers = [# Optional
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    # 'Development Status :: 3 - Alpha',

    # Indicate who your project is intended for
    # 'Intended Audience :: Developers',
    # 'Topic :: Software Development :: Build Tools',

    # Pick your license as you wish
    'License :: OSI Approved :: BSD-3-Clause',
    # Specify the Python versions you support here. In particular, ensure
    # that you indicate you support Python 3. These classifiers are *not*
    # checked by 'pip install'. See instead 'python_requires' below.
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.6',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    "Programming Language :: Python :: 3.10",
    'Programming Language :: Python :: 3 :: Only',
    "Operating System :: OS Independent",
]


packages = [
    { include = "sid2re", from = "src" },
    { include = "tests", format = "sdist" },
]
[project.urls]
Homepage = "https://github.com/FraunhoferIOSB/SiD2Re"
Issues = "https://github.com/FraunhoferIOSB/SiD2Re/issues"
Paper = "https://ieeexplore.ieee.org/document/10218255"

[tool.poetry.dependencies]
python = "^3.8"
scikit-learn = "^1.2.1"
pandas = "^1.5.3"
matplotlib = "^3.6.3"
numpy = "^1.24.1"
seaborn = "^0.12.2"
tqdm = "*"


[tool.poetry.group.test]
optional = true
[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
check-manifest = "*"
coverage = "*"
tox = "*"

[tool.poetry.group.lint]
optional = true
[tool.poetry.group.lint.dependencies]
mypy = "*"
types-PyYAML = "*"
types-protobuf = "*"
types-pytz = "*"
types-python-dateutil = "*"
types-setuptools = "*"
types-appdirs = "*"
types-tqdm = "*"
flake8 = "*"
flake8-pyproject = "*"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
dvc = "*"
ipympl = "^0.9.3"

[tool.poetry.group.ci]
optional = true
[tool.poetry.group.ci.dependencies]
fire = "^0.5.0"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
Sphinx = "4.4.0"
sphinx-rtd-theme = "1.0.0"
nbsphinx = "0.8.8"
sphinx-gallery = "0.10.1"

[tool.poetry.scripts]
SiD2ReGenerator = "sid2re.main:main"



[[tool.poetry.source]]
name = "autolern-pypi"
url = "https://gitlab.cc-asp.fraunhofer.de/api/v4/groups/63467/-/packages/pypi/simple"
priority = 'supplemental'

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
]
testpaths = [
    "tests"
]
pythonpath = [
    "src"
]


# MYPY
# Global options:

[tool.mypy]
python_version = 3.8
warn_return_any = true
warn_unused_configs = true

# Per-module options:

[[tool.mypy.overrides]]
module = "sid2re"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "sid2re.*"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "pipesai"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "pipesai.*"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "dependency_injector"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "fire"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "matplotlib"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "matplotlib.*"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "numpy"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "pandas"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "sklearn"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "sklearn.*"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "torch"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "tqdm"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "seaborn"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "sid2re"
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "sid2re.*"
ignore_missing_imports = true
warn_return_any = false

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = lint, type, py{38}

# Define the minimal tox version required to run;
# if the host tox is less than this the tool with create an environment and
# provision it with a tox that satisfies it under provision_tox_env.
# At least this version is needed for PEP 517/518 support.
minversion = 3.3.0

# Activate isolated build environment. tox will use a virtual environment
# to build a source distribution from the source tree. For build tools and
# arguments use the pyproject.toml file as specified in PEP-517 and PEP-518.
isolated_build = true

[testenv]
passenv =
    DBUS_SESSION_BUS_ADDRESS
skip_install = true
allowlist_externals = poetry
commands_pre =
    poetry install --with test
commands =
    poetry run pytest --cov=src --cov-report=xml --cov-report=term-missing --import-mode importlib

[testenv:type]
passenv =
    DBUS_SESSION_BUS_ADDRESS
skip_install = true
allowlist_externals = poetry
commands_pre =
    poetry install --with lint
commands =
    poetry run mypy src


[testenv:lint]
skip_install = true
allowlist_externals = poetry
commands_pre =
    poetry install --only lint
commands =
    poetry run flake8 src
    poetry run flake8 tests
"""

[tool.flake8]
exclude = [".tox", "*.egg", "build", "data"]
select = ["E", "W", "F"]
max-line-length = 120
ignore = ["E731", "W503"]